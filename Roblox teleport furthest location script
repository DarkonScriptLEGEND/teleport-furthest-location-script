local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- UI setup
local ScreenGui = Instance.new("ScreenGui", player.PlayerGui)
ScreenGui.Name = "TeleportGui"

local teleportBtn = Instance.new("TextButton", ScreenGui)
teleportBtn.Size = UDim2.new(0, 140, 0, 40)
teleportBtn.Position = UDim2.new(0, 10, 0, 10)
teleportBtn.Text = "Teleport Furthest"
teleportBtn.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
teleportBtn.TextColor3 = Color3.new(1,1,1)
teleportBtn.Font = Enum.Font.SourceSansBold
teleportBtn.TextScaled = true

local autoBtn = Instance.new("TextButton", ScreenGui)
autoBtn.Size = UDim2.new(0, 140, 0, 40)
autoBtn.Position = UDim2.new(0, 160, 0, 10)
autoBtn.Text = "Auto Teleport: OFF"
autoBtn.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
autoBtn.TextColor3 = Color3.new(1,1,1)
autoBtn.Font = Enum.Font.SourceSansBold
autoBtn.TextScaled = true

-- Cooldown setup
local canTeleport = true
local cooldownTime = 4

-- Teleport sound
local teleportSound = Instance.new("Sound", humanoidRootPart)
teleportSound.SoundId = "rbxassetid://2801263"
teleportSound.Volume = 0.7

-- Flash frame for visual effect
local flashFrame = Instance.new("Frame", ScreenGui)
flashFrame.BackgroundColor3 = Color3.new(1,1,1)
flashFrame.Size = UDim2.new(1,0,1,0)
flashFrame.BackgroundTransparency = 1
flashFrame.ZIndex = 10

-- Helper to flash screen
local function flashScreen()
    flashFrame.BackgroundTransparency = 0.2
    local tween = TweenService:Create(flashFrame, TweenInfo.new(0.4), {BackgroundTransparency = 1})
    tween:Play()
end

-- Safety check function
local function isSafePosition(pos)
    -- Raycast downward to find ground
    local rayOrigin = pos + Vector3.new(0, 5, 0)
    local rayDirection = Vector3.new(0, -10, 0)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    if result then
        local groundY = result.Position.Y
        if pos.Y < groundY + 0.6 and pos.Y > groundY - 1 then
            -- Check nearby parts for collisions
            local region = Region3.new(pos - Vector3.new(2,2,2), pos + Vector3.new(2,2,2))
            local parts = workspace:FindPartsInRegion3WithIgnoreList(region, {character}, 10)
            for _, part in pairs(parts) do
                if part.CanCollide and not part:IsDescendantOf(character) then
                    return false
                end
            end
            if pos.Y < 5 then return false end -- avoid void
            return true
        end
    end
    return false
end

-- Precompute all safe parts positions in workspace and store them sorted by distance
local safePositions = {}

local function gatherSafePositions()
    safePositions = {}
    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.CanCollide and part.Transparency < 0.5 then
            local pos = part.Position + Vector3.new(0, part.Size.Y/2 + 2, 0)
            if isSafePosition(pos) then
                table.insert(safePositions, pos)
            end
        end
    end

    -- Sort safePositions by distance from player
    table.sort(safePositions, function(a, b)
        return (a - humanoidRootPart.Position).Magnitude > (b - humanoidRootPart.Position).Magnitude
    end)
end

gatherSafePositions()

local currentIndex = 0

local function createTeleportParticles(position)
    local particlePart = Instance.new("Part")
    particlePart.Size = Vector3.new(1,1,1)
    particlePart.Anchored = true
    particlePart.CanCollide = false
    particlePart.Transparency = 1
    particlePart.Position = position
    particlePart.Parent = workspace

    local particleEmitter = Instance.new("ParticleEmitter", particlePart)
    particleEmitter.Texture = "rbxassetid://258128463"
    particleEmitter.Rate = 100
    particleEmitter.Lifetime = NumberRange.new(0.5)
    particleEmitter.Speed = NumberRange.new(5)
    particleEmitter.Size = NumberSequence.new(1)
    particleEmitter.EmissionDirection = Enum.NormalId.Top
    particleEmitter.LightEmission = 1
    particleEmitter.RotSpeed = NumberRange.new(200)
    particleEmitter.Enabled = true

    Debris:AddItem(particlePart, 1)
end

local function teleportToNextFurthest()
    if not canTeleport then return end
    canTeleport = false

    if #safePositions == 0 then
        warn("No safe positions found.")
        canTeleport = true
        return
    end

    currentIndex = currentIndex + 1
    if currentIndex > #safePositions then
        currentIndex = 1
    end

    local targetPos = safePositions[currentIndex]

    teleportSound:Play()
    createTeleportParticles(targetPos)
    flashScreen()

    humanoidRootPart.CFrame = CFrame.new(targetPos.X, targetPos.Y, targetPos.Z)

    wait(cooldownTime)
    canTeleport = true
end

-- UI Button events
teleportBtn.MouseButton1Click:Connect(function()
    teleportToNextFurthest()
end)

local autoTeleporting = false
autoBtn.MouseButton1Click:Connect(function()
    autoTeleporting = not autoTeleporting
    if autoTeleporting then
        autoBtn.Text = "Auto Teleport: ON"
        autoBtn.BackgroundColor3 = Color3.fromRGB(50, 150, 50)
    else
        autoBtn.Text = "Auto Teleport: OFF"
        autoBtn.BackgroundColor3 = Color3.fromRGB(150, 50, 50)
    end
end)

-- Auto teleport loop
spawn(function()
    while true do
        wait(0.1)
        if autoTeleporting and canTeleport then
            teleportToNextFurthest()
        end
    end
end)
